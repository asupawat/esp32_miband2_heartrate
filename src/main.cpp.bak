/**
 * A BLE client example that is rich in capabilities.
 */

#include "BLEDevice.h"
#include "HardwareSerial.h"
#include "mbedtls/aes.h"
//#include <authentication.h>
#include <uuid.h>
#include<lcd.h>

uint8_t _KEY [18] =  {0x01,0x00,0x28,0x6b,0xc5,0x9d,0x91,0x95,0x9a,0x72,0xe5,0xcc,0xb7,0xaf,0x62,0x33,0xee,0x35};
uint8_t _send_rnd_cmd[2] = {0x02,0x00};
uint8_t encrypted_num[18]={0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
uint8_t none[2] = {0,0};
uint8_t fucker[13] = {0x05,0x01,0xE8,0x8A,0xB1,0xE8,0x8A,0xB1};
// uint8_t fucker[13] = {0x05,0x01,0xE8,0x80,0x81,0xE5,0xB8,0x88,0xE5,0xA5,0xBD};

static BLEAddress *pServerAddress;
static bool doConnect = false;
static bool connected = false;
static bool authenticated = false;
static bool dorequire = false;
static bool doencrpyt = false;
static bool encrypted = false;
static mbedtls_aes_context aes;

LCD lcd;

BLERemoteCharacteristic* pRemoteCharacteristic;
BLERemoteCharacteristic* pAlertCharacteristic;
BLERemoteCharacteristic* pAlert2Characteristic;
static void notifyCallback(
  BLERemoteCharacteristic* pBLERemoteCharacteristic,
  uint8_t* pData,
  size_t length,
  bool isNotify) {
    Serial.println("Notify datas:");
    for (int i=0;i<length;i++)
		  Serial.printf("%04x ",pData[i]);
    Serial.println();
    if (pData[1]==0x01 && pData[2]==0x01)
      dorequire=true;
    if (doencrpyt)
    {
      mbedtls_aes_init(&aes);
      mbedtls_aes_setkey_enc( &aes,(_KEY+2), 128 );//因为秘钥前加了前缀，所以加上前缀的偏移量
      mbedtls_aes_crypt_ecb(&aes, MBEDTLS_AES_ENCRYPT, pData+3,encrypted_num+2);
      mbedtls_aes_free(&aes);
      encrypted=true;
    }
}

bool connectToServer(BLEAddress pAddress) {
    Serial.print("Forming a connection to ");
    Serial.println(pAddress.toString().c_str());
    
    BLEClient*  pClient  = BLEDevice::createClient();
    Serial.println(" - Created client");

    // Connect to the remove BLE Server.
    pClient->connect(pAddress);
    Serial.println(" - Connected to server");

    // Obtain a reference to the service we are after in the remote BLE server.
    BLERemoteService* pRemoteService = pClient->getService(service2_uuid);
    BLERemoteService* pAlertService = pClient->getService(alert_sev_uuid);
    BLERemoteService* pAlert2Service = pClient->getService(alert_notify_sev_uuid);
    if (pRemoteService == nullptr) {
      Serial.print("Failed to find our service UUID: ");
      Serial.println(service2_uuid.toString().c_str());
      return false;
    }
    lcd .Show_Str(1,17,BLUE,BLACK,"MI BAND CONNECTED!",16,1);


    // Obtain a reference to the characteristic in the service of the remote BLE server.
    pRemoteCharacteristic = pRemoteService->getCharacteristic(auth_characteristic_uuid);
    pAlertCharacteristic = pAlertService->getCharacteristic(alert_cha_uuid);
    pAlert2Characteristic = pAlert2Service->getCharacteristic(alert2_cha_uuid);
    if (pRemoteCharacteristic == nullptr) {
      Serial.print("Failed to find our characteristic UUID: ");
      Serial.println(auth_characteristic_uuid.toString().c_str());
      return false;
    }
    Serial.println(" - Found our characteristic");

    //pRemoteCharacteristic->registerForNotify(auth_notifyCallback);											//注册认证时的通知回调函数
    pRemoteCharacteristic->registerForNotify(notifyCallback);
    return true;
}
/**
 * Scan for BLE servers and find the first one that advertises the service we are looking for.
 */
class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
 /**
   * Called for each advertising BLE server.
   */
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    Serial.print("BLE Advertised Device found: ");
    Serial.println(advertisedDevice.toString().c_str());
    // We have found a device, let us now see if it contains the service we are looking for.
    if (advertisedDevice.getName()==std::string("MI Band 2") && advertisedDevice.getAddress().toString()==std::string("fb:24:d1:c1:3e:f3" )) {
      lcd .Show_Str(1,0,BLUE,BLACK,"MI BAND FOUND!",16,1);
      pServerAddress = new BLEAddress(advertisedDevice.getAddress());
      doConnect = true;

    } // Found our server
  } // onResult
}; // MyAdvertisedDeviceCallbacks


void setup() {
  Serial.begin(115200);
  lcd.LCD_GPIOInit();
  lcd.LCD_Init();
  lcd.LCD_Clear(BLACK);
  POINT_COLOR=BLUE;
  
  Serial.println("Starting Arduino BLE Client application...");
  BLEDevice::init("");

  // Retrieve a Scanner and set the callback we want to use to be informed when we
  // have detected a new device.  Specify that we want active scanning and start the
  // scan to run for 30 seconds.
  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true);
  pBLEScan->start(30);
} // End of setup.


// This is the Arduino main loop function.
void loop() {

  // If the flag "doConnect" is true then we have scanned for and found the desired
  // BLE Server with which we wish to connect.  Now we connect to it.  Once we are 
  // connected we set the connected flag to be true.
  if (doConnect == true) {
    if (connectToServer(*pServerAddress)) {
      Serial.println("We are now connected to the BLE Server.");
      connected = true;
    } else {
      Serial.println("We have failed to connect to the server; there is nothin more we will do.");
    }
    doConnect = false;
  }

  // If we are connected to a peer BLE Server, update the characteristic each time we are reached
  // with the current time since boot.
  if (connected && !authenticated) {
    BLERemoteDescriptor* pauth_descripter;															  		     //开启手环认证通知
    pauth_descripter=pRemoteCharacteristic->getDescriptor(BLEUUID((uint16_t)0x2902));	
    pauth_descripter->writeValue(_KEY,2,true);
    // pRemoteCharacteristic->writeValue(_KEY,18);
    // while(!dorequire)
    // {
    //  delay(100);
    // }
    pRemoteCharacteristic->writeValue(_send_rnd_cmd,2);//获取随机数
    doencrpyt=true;
    while(!encrypted)
      delay(100);
    pRemoteCharacteristic->writeValue(encrypted_num,18);
    authenticated = true;
    pauth_descripter->writeValue(none,2,true);
  }
  if(connected&&authenticated)
   {
     lcd.Show_Str(1,33,BLUE,BLACK,"Let's go!",16,1);
     pAlert2Characteristic->writeValue(fucker,13,true);
     //pAlertCharacteristic->writeValue(0x03);
   }
  delay(15000); // Delay a second between loops.
} // End of loop